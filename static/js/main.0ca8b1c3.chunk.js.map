{"version":3,"sources":["context/transaction/transactionContext.js","components/transaction/TransactionForm.js","context/calculation/calculationContext.js","components/transaction/TransactionRow.js","components/transaction/TransactionTable.js","components/calculation/CalculationRow.js","components/calculation/CalculationTable.js","context/transaction/transactionReducer.js","context/types.js","context/transaction/TransactionState.js","context/calculation/calculationReducer.js","context/calculation/CalculationState.js","App.js","index.js"],"names":["transactionContext","createContext","TransactionForm","addTransaction","useContext","TransactionContext","useEffect","select","document","querySelector","M","FormSelect","init","useState","service","type","asset","transDate","qty","amount","fee","transaction","setTransaction","onChange","e","target","name","value","className","onSubmit","preventDefault","id","placeholder","htmlFor","file","getElementById","console","log","files","length","Papa","parse","header","complete","parsedTransactions","data","csvTransaction","calculationContext","TransactionRow","displayDate","TransactionTable","transactions","setAssetTypes","CalculationContext","map","key","onClick","CalculationRow","purchaseDate","costBasis","sellDate","capitalGain","format","toFixed","CalculationTable","assetTypes","exportByAsset","$","DataTable","paging","ordering","info","searching","dom","buttons","state","action","payload","TransactionState","props","useReducer","transactionReducer","sorted","current","dispatch","Provider","uuid","v4","moment","parseFloat","children","transByAsset","assets","export","types","CalculationState","calculationReducer","uniqueTypes","assetTrans","calcTransactions","sort","a","b","indexOf","push","toUpperCase","filter","purchases","calculationExport","toLowerCase","averageCost","qtyLeft","avgCost","currentSaleEntry","qtySaleRemaining","shift","calculateCostBasis","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.0ca8b1c3.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst transactionContext = createContext();\n\nexport default transactionContext;\n","import React, { Fragment, useEffect, useState, useContext } from 'react';\nimport TransactionContext from '../../context/transaction/transactionContext';\nimport Papa from 'papaparse';\n\nconst TransactionForm = () => {\n  const transactionContext = useContext(TransactionContext);\n\n  const { addTransaction } = transactionContext;\n\n  useEffect(() => {\n    // // Initializing datePicker and select elements with Materialize-css\n    // const datePicker = document.querySelector('.datepicker');\n    // // eslint-disable-next-line no-undef\n    // M.Datepicker.init(datePicker, {\n    //   autoClose: true,\n    //   onSelect: date => {\n    //     let dispDate = `${date.getDate()}, ${date.getFullYear()}`;\n    //     switch (date.getMonth()) {\n    //       case 0:\n    //         dispDate = `Jan ${dispDate} `;\n    //         break;\n\n    //       case 1:\n    //         dispDate = `Feb ${dispDate}`;\n    //         break;\n\n    //       case 2:\n    //         dispDate = `Mar ${dispDate}`;\n    //         break;\n\n    //       case 3:\n    //         dispDate = `Apr ${dispDate}`;\n    //         break;\n\n    //       case 4:\n    //         dispDate = `May ${dispDate}`;\n    //         break;\n\n    //       case 5:\n    //         dispDate = `Jun ${dispDate}`;\n    //         break;\n\n    //       case 6:\n    //         dispDate = `Jul ${dispDate}`;\n    //         break;\n\n    //       case 7:\n    //         dispDate = `Aug ${dispDate}`;\n    //         break;\n\n    //       case 8:\n    //         dispDate = `Sep ${dispDate}`;\n    //         break;\n\n    //       case 9:\n    //         dispDate = `Oct ${dispDate}`;\n    //         break;\n\n    //       case 10:\n    //         dispDate = `Nov ${dispDate}`;\n    //         break;\n\n    //       case 11:\n    //         dispDate = `Dec ${dispDate}`;\n    //         break;\n\n    //       default:\n    //         dispDate = '';\n    //         break;\n    //     }\n    //     setTransaction({\n    //       ...transaction,\n    //       transDate: date,\n    //       displayDate: dispDate\n    //     });\n    //   }\n    // });\n\n    const select = document.querySelector('#type');\n    // eslint-disable-next-line no-undef\n    M.FormSelect.init(select);\n  });\n\n  // set up component level state\n  const [transaction, setTransaction] = useState({\n    service: '',\n    type: 'sell',\n    asset: '',\n    //displayDate: '',\n    transDate: '',\n    qty: '',\n    amount: '',\n    fee: ''\n  });\n\n  // destructure state for easier use\n  const { service, type, asset, transDate, qty, amount, fee } = transaction;\n\n  // update component state when form inputs change\n  const onChange = e => {\n    setTransaction({ ...transaction, [e.target.name]: e.target.value });\n  };\n\n  // actions for single transaction form submission\n  const onSubmitSingle = e => {\n    e.preventDefault();\n    addTransaction(transaction);\n    setTransaction({\n      service: '',\n      type: 'sell',\n      asset: '',\n      //displayDate: '',\n      transDate: '',\n      qty: '',\n      amount: '',\n      fee: ''\n    });\n  };\n\n  // actions for file upload form submission\n  const onSubmitUpload = e => {\n    e.preventDefault();\n    const file = document.getElementById('fileUpload');\n    console.log(file, file.files.length);\n    if (file.files.length > 0) {\n      Papa.parse(file.files[0], {\n        header: true,\n        complete: parsedTransactions => {\n          // put add transaction code here\n          console.log(parsedTransactions);\n          for (var csvTransaction of parsedTransactions.data) {\n            addTransaction(csvTransaction);\n          }\n        }\n      });\n    }\n    file.value = '';\n    document.getElementById('filePathText').value = '';\n  };\n\n  return (\n    <Fragment>\n      <div className='row section'>\n        <form className='col s12' onSubmit={onSubmitSingle}>\n          <div className='row'>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='service'\n                id='service'\n                value={service}\n                placeholder='e.g. Coinbase'\n                className='validate'\n                onChange={onChange}\n              />\n              <label htmlFor='service'>Trading Service</label>\n            </div>\n            <div className='input-field col s2'>\n              <select name='type' id='type' value={type} onChange={onChange}>\n                <option value='buy'>Buy</option>\n                <option value='sell'>Sell</option>\n              </select>\n              <label htmlFor='type'>Transaction Type</label>\n            </div>\n            <div className='input-field col s1'>\n              <input\n                type='text'\n                name='asset'\n                id='asset'\n                placeholder='e.g. BTC, ETH, LTC'\n                className='validate'\n                value={asset}\n                onChange={onChange}\n              />\n              <label htmlFor='asset'>Asset</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='transDate'\n                id='transDate'\n                placeholder='ISO 8601 Format'\n                className='datepicker'\n                value={transDate}\n                onChange={onChange}\n              />\n              <label htmlFor='transdate'>Transaction Date</label>\n            </div>\n            <div className='input-field col s1'>\n              <input\n                type='text'\n                name='qty'\n                id='qty'\n                placeholder='Quantity'\n                value={qty}\n                onChange={onChange}\n              />\n              <label htmlFor='qty'>Quantity</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='amount'\n                id='amount'\n                placeholder='Dollar Amount'\n                value={amount}\n                onChange={onChange}\n              />\n              <label htmlFor='amount'>Transaction Amount</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='fee'\n                id='fee'\n                placeholder='Fees'\n                value={fee}\n                onChange={onChange}\n              />\n              <label htmlFor='fee'>Transaction Fee</label>\n            </div>\n          </div>\n          <div className='row center-align'>\n            <button\n              className='btn waves-effect waves-light'\n              type='submit'\n              name='submit'\n            >\n              Add Transaction\n              <i className='material-icons right'>send</i>\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className='row section'>\n        <form className='col s4 push-s4' onSubmit={onSubmitUpload}>\n          <div className='file-field input-field'>\n            <div className='btn'>\n              <span>Select File</span>\n              <input type='file' id='fileUpload' />\n            </div>\n            <div className='file-path-wrapper'>\n              <input\n                type='text'\n                className='file-path validate'\n                id='filePathText'\n              />\n            </div>\n          </div>\n          <div className='row center-align'>\n            <button\n              className='btn waves-effect waves-light'\n              type='submit'\n              name='submit'\n            >\n              Parse Transactions\n              <i className='material-icons right'>insert_drive_file</i>\n            </button>\n          </div>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default TransactionForm;\n","import { createContext } from 'react';\n\nconst calculationContext = createContext();\n\nexport default calculationContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TransactionRow = ({ transaction }) => {\n  console.log(transaction);\n\n  const {\n    // id,\n    service,\n    type,\n    asset,\n    displayDate,\n    // transDate,\n    qty,\n    amount,\n    fee\n  } = transaction;\n\n  console.log('pre-return');\n\n  return (\n    <tr>\n      <td>{service}</td>\n      <td>{type}</td>\n      <td>{asset}</td>\n      <td>{displayDate}</td>\n      <td>{qty}</td>\n      <td>$ {amount}</td>\n      <td>$ {fee}</td>\n    </tr>\n  );\n};\n\nTransactionRow.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nexport default TransactionRow;\n","import React, { useContext } from 'react';\nimport TransactionContext from '../../context/transaction/transactionContext';\nimport CalculationContext from '../../context/calculation/calculationContext';\nimport TransactionRow from './TransactionRow';\n\nconst TransactionTable = () => {\n  // set up transaction context\n  const transactionContext = useContext(TransactionContext);\n\n  const { transactions } = transactionContext;\n\n  // set up calculation context\n  const calculationContext = useContext(CalculationContext);\n\n  const { setAssetTypes } = calculationContext;\n\n  if (transactions.length === 0) {\n    return (\n      <div className='container center-align'>\n        <h4>Enter a transaction!</h4>\n      </div>\n    );\n  }\n\n  console.log(transactions);\n\n  const onClick = () => {\n    setAssetTypes(transactions);\n  };\n\n  return (\n    <div className='container'>\n      <table className='striped centered'>\n        <thead>\n          <tr>\n            <th>Service</th>\n            <th>Type</th>\n            <th>Asset</th>\n            <th>Date</th>\n            <th>Quantity</th>\n            <th>Amount</th>\n            <th>Fee</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(transaction => (\n            <TransactionRow transaction={transaction} key={transaction.id} />\n          ))}\n        </tbody>\n      </table>\n      <div className='row center-align'>\n        <button className='waves-effect waves-light btn' onClick={onClick}>\n          <i className='material-icons right'>attach_money</i>Calculate!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CalculationRow = ({ transaction }) => {\n  console.log(transaction);\n\n  const {\n    service,\n    asset,\n    purchaseDate,\n    costBasis,\n    sellDate,\n    capitalGain\n  } = transaction;\n\n  console.log('pre-return');\n\n  return (\n    <tr>\n      <td>{service}</td>\n      <td>{asset}</td>\n      <td>{purchaseDate.format('LLLL')}</td>\n      <td>{costBasis.toFixed(2)}</td>\n      <td>{sellDate.format('LLLL')}</td>\n      <td>$ {capitalGain.toFixed(2)}</td>\n    </tr>\n  );\n};\n\nCalculationRow.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nexport default CalculationRow;\n","import React, { useContext, Fragment, useEffect } from 'react';\n// import TransactionContext from '../../context/transaction/transactionContext';\nimport CalculationContext from '../../context/calculation/calculationContext';\nimport CalculationRow from './CalculationRow';\n\nconst CalculationTable = () => {\n  // set up calculation context\n  const calculationContext = useContext(CalculationContext);\n\n  const { assetTypes, exportByAsset } = calculationContext;\n\n  useEffect(() => {\n    // eslint-disable-next-line no-undef\n    $('.calculation-table').DataTable({\n      paging: false,\n      ordering: false,\n      info: false,\n      searching: false,\n      dom: 'Bfrtip',\n      buttons: ['csv']\n    });\n  });\n\n  console.log('exportByAsset: ', exportByAsset);\n  console.log('assetTypes: ', assetTypes);\n\n  if (assetTypes) {\n    return (\n      <Fragment>\n        {assetTypes.map(asset => (\n          <div className='container'>\n            <h2>{asset}</h2>\n            <table className='striped centered calculation-table'>\n              <thead>\n                <tr>\n                  <th>Service</th>\n                  <th>Asset</th>\n                  <th>Date of Purchase</th>\n                  <th>Cost Basis</th>\n                  <th>Date of Sale</th>\n                  <th>Sale Proceeds</th>\n                </tr>\n              </thead>\n              <tbody>\n                {exportByAsset[asset].map(transaction => (\n                  <CalculationRow\n                    transaction={transaction}\n                    key={transaction.id}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ))}\n      </Fragment>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default CalculationTable;\n","import { ADD_TRANSACTION } from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","export const ADD_TRANSACTION = 'ADD_TRANSACTION';\nexport const SET_ASSET_TYPES = 'GET_ASSET_TYPES';\nexport const ADD_ASSET_TRANSACTIONS = 'ADD_ASSET_TRANSACTIONS';\n// export const DELETE_TRANSACTION = 'DELETE_TRANSACTION';\n// export const SET_CURRENT = 'SET_CURRENT';\n// export const CLEAR_CURRENT = 'CLEAR CURRENT';\n// export const UPDATE_TRANSACTION = 'UPDATE_TRANSACTION';\n// export const FILTER_TRANSACTIONS = 'FILTER_TRANSACTIONS';\n// export const CLEAR_FILTER = 'CLEAR_FILTER';\n// export const SET_ALERT = 'SET_ALERT';\n// export const REMOVE_ALERT = 'REMOVE_ALERT';\n","import React, { useReducer } from 'react';\nimport uuid from 'uuid';\nimport moment from 'moment';\nimport TransactionContext from './transactionContext';\nimport transactionReducer from './transactionReducer';\n\nimport { ADD_TRANSACTION } from '../types';\n\nconst TransactionState = props => {\n  const initialState = {\n    transactions: [],\n    sorted: {},\n    current: null\n  };\n\n  const [state, dispatch] = useReducer(transactionReducer, initialState);\n\n  // Add Transaction\n  const addTransaction = transaction => {\n    // set unique id\n    transaction.id = uuid.v4();\n\n    // format input data\n    transaction.transDate = moment(transaction.transDate);\n    transaction.qty = parseFloat(transaction.qty);\n    transaction.amount = parseFloat(transaction.amount);\n    transaction.fee = parseFloat(transaction.fee);\n\n    // set display date\n    transaction.displayDate = transaction.transDate.format('llll');\n    dispatch({\n      type: ADD_TRANSACTION,\n      payload: transaction\n    });\n  };\n\n  // Delete Transaction\n\n  // Set Current Transaction\n\n  // Clear Current Transaction\n\n  // Update Transaction\n\n  // Sort Transactions\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        transactions: state.transactions,\n        sorted: state.sorted,\n        current: state.current,\n        addTransaction\n      }}\n    >\n      {props.children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport default TransactionState;\n","import { SET_ASSET_TYPES, ADD_ASSET_TRANSACTIONS } from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_ASSET_TYPES:\n      return {\n        ...state,\n        assetTypes: action.payload\n      };\n\n    case ADD_ASSET_TRANSACTIONS:\n      return {\n        // ...state,\n        transByAsset: action.payload.assets,\n        exportByAsset: action.payload.export,\n        assetTypes: action.payload.types\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from 'react';\n// import moment from 'moment';\n// import uuid from 'uuid';\nimport CalculationContext from './calculationContext';\nimport calculationReducer from './calculationReducer';\n\nimport { ADD_ASSET_TRANSACTIONS } from '../types';\n\nconst CalculationState = props => {\n  const initialState = {\n    assetTypes: null,\n    transByAsset: null,\n    exportByAsset: null\n  };\n\n  const [state, dispatch] = useReducer(calculationReducer, initialState);\n\n  const setAssetTypes = transactions => {\n    let uniqueTypes = [];\n    let transByAsset = {};\n    let assetTrans = null;\n    let exportByAsset = {};\n    let calcTransactions = [...transactions];\n    // sort all transactions by date\n    calcTransactions.sort((a, b) => a.transDate - b.transDate);\n\n    // generate list of unique asset types\n    for (let transaction of calcTransactions) {\n      if (uniqueTypes.indexOf(transaction.asset) === -1) {\n        uniqueTypes.push(transaction.asset.toUpperCase());\n      }\n    }\n\n    // separate calcTransactions by asset type and calculate cost basis\n    for (let type of uniqueTypes) {\n      assetTrans = calcTransactions.filter(\n        transaction => transaction.asset.toUpperCase() === type\n      );\n\n      exportByAsset[type] = calculateCostBasis(assetTrans);\n      transByAsset[type] = assetTrans;\n    }\n\n    // calculate cost basis\n\n    let myPayload = {\n      types: uniqueTypes,\n      assets: transByAsset,\n      export: exportByAsset\n    };\n\n    dispatch({\n      type: ADD_ASSET_TRANSACTIONS,\n      payload: myPayload\n    });\n  };\n\n  return (\n    <CalculationContext.Provider\n      value={{\n        assetTypes: state.assetTypes,\n        transByAsset: state.transByAsset,\n        exportByAsset: state.exportByAsset,\n        setAssetTypes\n      }}\n    >\n      {props.children}\n    </CalculationContext.Provider>\n  );\n};\n\nexport default CalculationState;\n\nfunction calculateCostBasis(transactions) {\n  let purchases = [];\n  let calculationExport = [];\n\n  for (let transaction of transactions) {\n    if (transaction.type.toLowerCase() === 'buy') {\n      transaction.costBasis = transaction.amount + transaction.fee;\n      transaction.averageCost = transaction.costBasis / transaction.qty;\n      purchases.push({\n        transDate: transaction.transDate,\n        service: transaction.service,\n        qtyLeft: transaction.qty,\n        avgCost: transaction.averageCost\n      });\n      console.log(purchases);\n    } else if (transaction.type.toLowerCase() === 'sell') {\n      let currentSaleEntry = {};\n      let qtySaleRemaining = transaction.qty;\n      let costBasis = 0;\n      currentSaleEntry.id = transaction.id;\n      currentSaleEntry.service = purchases[0].service;\n      currentSaleEntry.purchaseDate = purchases[0].transDate;\n      currentSaleEntry.asset = transaction.asset;\n      currentSaleEntry.sellDate = transaction.transDate;\n      do {\n        if (purchases[0].qtyLeft >= qtySaleRemaining) {\n          // add assets from this purchase to cost basis\n          costBasis += purchases[0].avgCost * qtySaleRemaining;\n\n          // update quantity remaining for purchase\n          if (purchases[0].qtyLeft === qtySaleRemaining) {\n            purchases.shift();\n          } else {\n            purchases[0].qtyLeft -= qtySaleRemaining;\n          }\n          qtySaleRemaining = 0;\n        } else {\n          // add assets from this purchase to cost basis\n          costBasis += purchases[0].avgCost * purchases[0].qtyLeft;\n\n          // subtract quantity used from quantity remaining\n          qtySaleRemaining -= purchases[0].qtyLeft;\n\n          // remove depleted purchase from purchases array\n          purchases.shift();\n        }\n      } while (qtySaleRemaining > 0);\n\n      costBasis += transaction.fee;\n\n      currentSaleEntry.capitalGain = transaction.amount - costBasis;\n      currentSaleEntry.costBasis = costBasis;\n\n      calculationExport.push(currentSaleEntry);\n\n      // add cost basis to the trasaction object\n      transaction.costBasis = costBasis;\n      transaction.capitalGain = transaction.amount - costBasis;\n    }\n  }\n  return calculationExport;\n}\n","import React, { Fragment } from 'react';\nimport TransactionForm from './components/transaction/TransactionForm';\nimport TransactionTable from './components/transaction/TransactionTable';\nimport CalculationTable from './components/calculation/CalculationTable';\n\nimport TransactionState from './context/transaction/TransactionState';\nimport CalculationState from './context/calculation/CalculationState';\n// import './App.css';\n\nconst App = () => {\n  return (\n    <TransactionState>\n      <CalculationState>\n        <Fragment>\n          <h1 className='center-align'>Crypto Capital Gains Calculator</h1>\n          <div className='container'>\n            <p className='flow-text center'>\n              This app was built mainly to get practice designing and building\n              React apps. I am not an accountant and make no guarantees that the\n              calculations performed within this app are accurate. I encourage\n              you to seek the help of an accountant or tax expert with any\n              questions regarding tax obligations for crypto transactions.\n            </p>\n          </div>\n          <div className='divider'></div>\n          <TransactionForm />\n          <TransactionTable />\n          <CalculationTable />\n        </Fragment>\n      </CalculationState>\n    </TransactionState>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}