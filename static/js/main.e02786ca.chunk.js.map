{"version":3,"sources":["context/transaction/inputValidations.js","context/transaction/transactionContext.js","components/transaction/TransactionForm.js","context/calculation/calculationContext.js","components/transaction/TransactionRow.js","components/transaction/TransactionTable.js","components/calculation/CalculationRow.js","components/calculation/CalculationTable.js","components/errors/ErrorMessage.js","context/transaction/transactionReducer.js","context/types.js","context/transaction/TransactionState.js","context/calculation/calculationReducer.js","context/calculation/calculateCostBasis.js","context/calculation/CalculationState.js","App.js","index.js"],"names":["module","exports","isAlphanumeric","textString","match","isPositiveNumber","input","isNaN","isNumberWithMaxTwoDecimals","decimal","toString","split","length","transactionContext","createContext","TransactionForm","addTransaction","useContext","TransactionContext","useEffect","select","document","querySelector","M","FormSelect","init","useState","service","type","asset","transDate","qty","amount","fee","transaction","setTransaction","onChange","e","target","name","value","className","onSubmit","preventDefault","id","placeholder","htmlFor","file","getElementById","console","log","files","Papa","parse","header","complete","parsedTransactions","data","csvTransaction","calculationContext","TransactionRow","displayDate","validations","require","TransactionTable","props","transactions","setAssetTypes","CalculationContext","map","key","onClick","dateOfInvalidTransaction","isValid","findDateOfFirstInvalidTransaction","errorMessage","setErrorMessage","err","transactionErrorDate","CalculationRow","purchaseDate","costBasis","sellDate","capitalGain","format","toFixed","CalculationTable","assetTypes","exportByAsset","$","DataTable","paging","ordering","info","searching","dom","buttons","ErrorMessage","state","action","payload","TransactionState","useReducer","transactionReducer","sorted","dispatch","Provider","uuid","v4","moment","parseFloat","children","transByAsset","assets","export","types","SellMoreThanOwnError","message","Error","CalculationState","calculationReducer","uniqueTypes","assetTrans","calcTransactions","sort","a","b","indexOf","push","toUpperCase","filter","purchases","calculationExport","toLowerCase","averageCost","qtyLeft","avgCost","currentSaleEntry","qtySaleRemaining","shift","calculateCostBasis","App","setState","this","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.e02786ca.chunk.js","sourcesContent":["// Validate input is alphanumeric\nconst isAlphanumeric = (textString) => {\n  if (typeof textString !== \"string\") {\n    return false;\n  }\n  return !!textString.match(/^[0-9a-z]+$/i);\n};\n\n// Validate Quantity is a decimal value\nconst isPositiveNumber = (input) => {\n  if (typeof input !== \"number\" || isNaN(input)) {\n    return false;\n  }\n  return input > 0;\n};\n\n// Validate number is two decimals max\nconst isNumberWithMaxTwoDecimals = (input) => {\n  if (typeof input !== \"number\" || isNaN(input)) {\n    return false;\n  }\n  const inputString = input.toString();\n  const decimal = inputString.split(\".\")[1];\n  const hasNoDecimal = !decimal;\n  return hasNoDecimal || decimal.length <= 2;\n};\n\nmodule.exports.isAlphanumeric = isAlphanumeric;\nmodule.exports.isPositiveNumber = isPositiveNumber;\nmodule.exports.isNumberWithMaxTwoDecimals = isNumberWithMaxTwoDecimals;\n","import { createContext } from 'react';\n\nconst transactionContext = createContext();\n\nexport default transactionContext;\n","import React, { Fragment, useEffect, useState, useContext } from 'react';\nimport TransactionContext from '../../context/transaction/transactionContext';\nimport Papa from 'papaparse';\n\nconst TransactionForm = () => {\n  const transactionContext = useContext(TransactionContext);\n\n  const { addTransaction } = transactionContext;\n\n  useEffect(() => {\n    // // Initializing datePicker and select elements with Materialize-css\n    // const datePicker = document.querySelector('.datepicker');\n    // // eslint-disable-next-line no-undef\n    // M.Datepicker.init(datePicker, {\n    //   autoClose: true,\n    //   onSelect: date => {\n    //     let dispDate = `${date.getDate()}, ${date.getFullYear()}`;\n    //     switch (date.getMonth()) {\n    //       case 0:\n    //         dispDate = `Jan ${dispDate} `;\n    //         break;\n\n    //       case 1:\n    //         dispDate = `Feb ${dispDate}`;\n    //         break;\n\n    //       case 2:\n    //         dispDate = `Mar ${dispDate}`;\n    //         break;\n\n    //       case 3:\n    //         dispDate = `Apr ${dispDate}`;\n    //         break;\n\n    //       case 4:\n    //         dispDate = `May ${dispDate}`;\n    //         break;\n\n    //       case 5:\n    //         dispDate = `Jun ${dispDate}`;\n    //         break;\n\n    //       case 6:\n    //         dispDate = `Jul ${dispDate}`;\n    //         break;\n\n    //       case 7:\n    //         dispDate = `Aug ${dispDate}`;\n    //         break;\n\n    //       case 8:\n    //         dispDate = `Sep ${dispDate}`;\n    //         break;\n\n    //       case 9:\n    //         dispDate = `Oct ${dispDate}`;\n    //         break;\n\n    //       case 10:\n    //         dispDate = `Nov ${dispDate}`;\n    //         break;\n\n    //       case 11:\n    //         dispDate = `Dec ${dispDate}`;\n    //         break;\n\n    //       default:\n    //         dispDate = '';\n    //         break;\n    //     }\n    //     setTransaction({\n    //       ...transaction,\n    //       transDate: date,\n    //       displayDate: dispDate\n    //     });\n    //   }\n    // });\n\n    const select = document.querySelector('#type');\n    // eslint-disable-next-line no-undef\n    M.FormSelect.init(select);\n  });\n\n  // set up component level state\n  const [transaction, setTransaction] = useState({\n    service: '',\n    type: 'sell',\n    asset: '',\n    //displayDate: '',\n    transDate: '',\n    qty: '',\n    amount: '',\n    fee: ''\n  });\n\n  // destructure state for easier use\n  const { service, type, asset, transDate, qty, amount, fee } = transaction;\n\n  // update component state when form inputs change\n  const onChange = e => {\n    setTransaction({ ...transaction, [e.target.name]: e.target.value });\n  };\n\n  // actions for single transaction form submission\n  const onSubmitSingle = e => {\n    e.preventDefault();\n    addTransaction(transaction);\n    setTransaction({\n      service: '',\n      type: 'sell',\n      asset: '',\n      //displayDate: '',\n      transDate: '',\n      qty: '',\n      amount: '',\n      fee: ''\n    });\n  };\n\n  // actions for file upload form submission\n  const onSubmitUpload = e => {\n    e.preventDefault();\n    const file = document.getElementById('fileUpload');\n    console.log(file, file.files.length);\n    if (file.files.length > 0) {\n      Papa.parse(file.files[0], {\n        header: true,\n        complete: parsedTransactions => {\n          // put add transaction code here\n          console.log(parsedTransactions);\n          for (var csvTransaction of parsedTransactions.data) {\n            addTransaction(csvTransaction);\n          }\n        }\n      });\n    }\n    file.value = '';\n    document.getElementById('filePathText').value = '';\n  };\n\n  return (\n    <Fragment>\n      <div className='row section'>\n        <form className='col s12' onSubmit={onSubmitSingle}>\n          <div className='row'>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='service'\n                id='service'\n                value={service}\n                placeholder='e.g. Coinbase'\n                className='validate'\n                onChange={onChange}\n              />\n              <label htmlFor='service'>Trading Service</label>\n            </div>\n            <div className='input-field col s2'>\n              <select name='type' id='type' value={type} onChange={onChange}>\n                <option value='buy'>Buy</option>\n                <option value='sell'>Sell</option>\n              </select>\n              <label htmlFor='type'>Transaction Type</label>\n            </div>\n            <div className='input-field col s1'>\n              <input\n                type='text'\n                name='asset'\n                id='asset'\n                placeholder='e.g. BTC, ETH, LTC'\n                className='validate'\n                value={asset}\n                onChange={onChange}\n              />\n              <label htmlFor='asset'>Asset</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='transDate'\n                id='transDate'\n                placeholder='ISO 8601 Format'\n                className='datepicker'\n                value={transDate}\n                onChange={onChange}\n              />\n              <label htmlFor='transdate'>Transaction Date</label>\n            </div>\n            <div className='input-field col s1'>\n              <input\n                type='text'\n                name='qty'\n                id='qty'\n                placeholder='Quantity'\n                value={qty}\n                onChange={onChange}\n              />\n              <label htmlFor='qty'>Quantity</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='amount'\n                id='amount'\n                placeholder='Dollar Amount'\n                value={amount}\n                onChange={onChange}\n              />\n              <label htmlFor='amount'>Transaction Amount</label>\n            </div>\n            <div className='input-field col s2'>\n              <input\n                type='text'\n                name='fee'\n                id='fee'\n                placeholder='Fees'\n                value={fee}\n                onChange={onChange}\n              />\n              <label htmlFor='fee'>Transaction Fee</label>\n            </div>\n          </div>\n          <div className='row center-align'>\n            <button\n              className='btn waves-effect waves-light'\n              type='submit'\n              name='submit'\n            >\n              Add Transaction\n              <i className='material-icons right'>send</i>\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className='row section'>\n        <form className='col s4 push-s4' onSubmit={onSubmitUpload}>\n          <div className='file-field input-field'>\n            <div className='btn'>\n              <span>Select File</span>\n              <input type='file' id='fileUpload' />\n            </div>\n            <div className='file-path-wrapper'>\n              <input\n                type='text'\n                className='file-path validate'\n                id='filePathText'\n              />\n            </div>\n          </div>\n          <div className='row center-align'>\n            <button\n              className='btn waves-effect waves-light'\n              type='submit'\n              name='submit'\n            >\n              Parse Transactions\n              <i className='material-icons right'>insert_drive_file</i>\n            </button>\n          </div>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default TransactionForm;\n","import { createContext } from 'react';\n\nconst calculationContext = createContext();\n\nexport default calculationContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TransactionRow = ({ transaction }) => {\n  console.log(transaction);\n\n  const {\n    // id,\n    service,\n    type,\n    asset,\n    displayDate,\n    // transDate,\n    qty,\n    amount,\n    fee\n  } = transaction;\n\n  console.log('pre-return');\n\n  return (\n    <tr>\n      <td>{service}</td>\n      <td>{type}</td>\n      <td>{asset}</td>\n      <td>{displayDate}</td>\n      <td>{qty}</td>\n      <td>$ {amount}</td>\n      <td>$ {fee}</td>\n    </tr>\n  );\n};\n\nTransactionRow.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nexport default TransactionRow;\n","import React, { useContext } from \"react\";\nimport TransactionContext from \"../../context/transaction/transactionContext\";\nimport CalculationContext from \"../../context/calculation/calculationContext\";\nimport TransactionRow from \"./TransactionRow\";\nconst validations = require(\"../../context/transaction/inputValidations\");\n\nconst TransactionTable = (props) => {\n  // set up transaction context\n  const transactionContext = useContext(TransactionContext);\n\n  const { transactions } = transactionContext;\n\n  // set up calculation context\n  const calculationContext = useContext(CalculationContext);\n\n  const { setAssetTypes } = calculationContext;\n\n  if (transactions.length === 0) {\n    return (\n      <div className=\"container center-align\">\n        <h4>Enter a transaction!</h4>\n      </div>\n    );\n  }\n\n  console.log(transactions);\n\n  const findDateOfFirstInvalidTransaction = (transactions) => {\n    for (let transaction of transactions) {\n      if (!validations.isAlphanumeric(transaction.service)) {\n        return transaction.displayDate;\n      } else if (!validations.isAlphanumeric(transaction.asset)) {\n        return transaction.displayDate;\n      } else if (!transaction.transDate.isValid()) {\n        return transaction.displayDate;\n      } else if (!validations.isPositiveNumber(transaction.qty)) {\n        return transaction.displayDate;\n      } else if (\n        transaction.amount <= 0 ||\n        !validations.isNumberWithMaxTwoDecimals(transaction.amount)\n      ) {\n        return transaction.displayDate;\n      } else if (\n        transaction.fee < 0 ||\n        !validations.isNumberWithMaxTwoDecimals(transaction.fee)\n      ) {\n        return transaction.displayDate;\n      }\n    }\n    return null;\n  };\n\n  const onClick = () => {\n    let dateOfInvalidTransaction = findDateOfFirstInvalidTransaction(\n      transactions\n    );\n    if (dateOfInvalidTransaction) {\n      let errorMessage = `Your transaction dated ${dateOfInvalidTransaction} has invalid input.`;\n      props.setErrorMessage(errorMessage);\n    } else {\n      try {\n        setAssetTypes(transactions);\n      } catch (err) {\n        if (err.name === \"SellMoreThanOwnError\") {\n          let errorMessage = `Your transaction dated ${err.transactionErrorDate} is attempting to sell more assets than you currently own.`;\n          props.setErrorMessage(errorMessage);\n        } else {\n          throw err;\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <table className=\"striped centered\">\n        <thead>\n          <tr>\n            <th>Service</th>\n            <th>Type</th>\n            <th>Asset</th>\n            <th>Date</th>\n            <th>Quantity</th>\n            <th>Amount</th>\n            <th>Fee</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map((transaction) => (\n            <TransactionRow transaction={transaction} key={transaction.id} />\n          ))}\n        </tbody>\n      </table>\n      <div className=\"row center-align\">\n        <button className=\"waves-effect waves-light btn\" onClick={onClick}>\n          <i className=\"material-icons right\">attach_money</i>Calculate!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CalculationRow = ({ transaction }) => {\n  console.log(transaction);\n\n  const {\n    service,\n    asset,\n    purchaseDate,\n    costBasis,\n    sellDate,\n    capitalGain\n  } = transaction;\n\n  console.log('pre-return');\n\n  return (\n    <tr>\n      <td>{service}</td>\n      <td>{asset}</td>\n      <td>{purchaseDate.format('LLLL')}</td>\n      <td>{costBasis.toFixed(2)}</td>\n      <td>{sellDate.format('LLLL')}</td>\n      <td>$ {capitalGain.toFixed(2)}</td>\n    </tr>\n  );\n};\n\nCalculationRow.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nexport default CalculationRow;\n","import React, { useContext, Fragment, useEffect } from 'react';\n// import TransactionContext from '../../context/transaction/transactionContext';\nimport CalculationContext from '../../context/calculation/calculationContext';\nimport CalculationRow from './CalculationRow';\n\nconst CalculationTable = () => {\n  // set up calculation context\n  const calculationContext = useContext(CalculationContext);\n\n  const { assetTypes, exportByAsset } = calculationContext;\n\n  useEffect(() => {\n    // eslint-disable-next-line no-undef\n    $('.calculation-table').DataTable({\n      paging: false,\n      ordering: false,\n      info: false,\n      searching: false,\n      dom: 'Bfrtip',\n      buttons: ['csv']\n    });\n  });\n\n  console.log('exportByAsset: ', exportByAsset);\n  console.log('assetTypes: ', assetTypes);\n\n  if (assetTypes) {\n    return (\n      <Fragment>\n        {assetTypes.map(asset => (\n          <div className='container'>\n            <h2>{asset}</h2>\n            <table className='striped centered calculation-table'>\n              <thead>\n                <tr>\n                  <th>Service</th>\n                  <th>Asset</th>\n                  <th>Date of Purchase</th>\n                  <th>Cost Basis</th>\n                  <th>Date of Sale</th>\n                  <th>Sale Proceeds</th>\n                </tr>\n              </thead>\n              <tbody>\n                {exportByAsset[asset].map(transaction => (\n                  <CalculationRow\n                    transaction={transaction}\n                    key={transaction.id}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ))}\n      </Fragment>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default CalculationTable;\n","import React from \"react\";\n\nconst ErrorMessage = (props) => {\n  if (props.errorMessage) {\n    return (\n      <h4 className=\"red-text text-darken-3 center-align\">\n        {props.errorMessage}\n      </h4>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default ErrorMessage;\n","import { ADD_TRANSACTION } from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n","export const ADD_TRANSACTION = \"ADD_TRANSACTION\";\nexport const SET_ASSET_TYPES = \"GET_ASSET_TYPES\";\nexport const ADD_ASSET_TRANSACTIONS = \"ADD_ASSET_TRANSACTIONS\";\n// export const DELETE_TRANSACTION = 'DELETE_TRANSACTION';\n// export const SET_CURRENT = 'SET_CURRENT';\n// export const CLEAR_CURRENT = 'CLEAR CURRENT';\n// export const UPDATE_TRANSACTION = 'UPDATE_TRANSACTION';\n// export const FILTER_TRANSACTIONS = 'FILTER_TRANSACTIONS';\n// export const CLEAR_FILTER = 'CLEAR_FILTER';\n// export const SET_ALERT = 'SET_ALERT';\n// export const REMOVE_ALERT = 'REMOVE_ALERT';\n","import React, { useReducer } from \"react\";\nimport uuid from \"uuid\";\nimport moment from \"moment\";\nimport TransactionContext from \"./transactionContext\";\nimport transactionReducer from \"./transactionReducer\";\n\nimport { ADD_TRANSACTION } from \"../types\";\n\nconst TransactionState = (props) => {\n  const initialState = {\n    transactions: [],\n    sorted: {},\n  };\n\n  const [state, dispatch] = useReducer(transactionReducer, initialState);\n\n  // Add Transaction\n  const addTransaction = (transaction) => {\n    // set unique id\n    transaction.id = uuid.v4();\n\n    // format input data\n    transaction.transDate = moment(transaction.transDate);\n    transaction.qty = parseFloat(transaction.qty);\n    transaction.amount = parseFloat(transaction.amount);\n    transaction.fee = parseFloat(transaction.fee);\n\n    // set display date\n    transaction.displayDate = transaction.transDate.format(\"llll\");\n    dispatch({\n      type: ADD_TRANSACTION,\n      payload: transaction,\n    });\n  };\n\n  // Delete Transaction\n\n  // Set Current Transaction\n\n  // Clear Current Transaction\n\n  // Update Transaction\n\n  // Sort Transactions\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        transactions: state.transactions,\n        sorted: state.sorted,\n        addTransaction,\n      }}\n    >\n      {props.children}\n    </TransactionContext.Provider>\n  );\n};\n\nexport default TransactionState;\n","import { SET_ASSET_TYPES, ADD_ASSET_TRANSACTIONS } from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_ASSET_TYPES:\n      return {\n        ...state,\n        assetTypes: action.payload\n      };\n\n    case ADD_ASSET_TRANSACTIONS:\n      return {\n        // ...state,\n        transByAsset: action.payload.assets,\n        exportByAsset: action.payload.export,\n        assetTypes: action.payload.types\n      };\n\n    default:\n      return state;\n  }\n};\n","export class SellMoreThanOwnError extends Error {\n  constructor(message, transactionErrorDate) {\n    super(message);\n    this.name = \"SellMoreThanOwnError\";\n    this.transactionErrorDate = transactionErrorDate;\n  }\n}\n\nexport function calculateCostBasis(transactions) {\n  let purchases = [];\n  let calculationExport = [];\n\n  for (let transaction of transactions) {\n    if (transaction.type.toLowerCase() === \"buy\") {\n      transaction.costBasis = transaction.amount + transaction.fee;\n      transaction.averageCost = transaction.costBasis / transaction.qty;\n      purchases.push({\n        transDate: transaction.transDate,\n        service: transaction.service,\n        qtyLeft: transaction.qty,\n        avgCost: transaction.averageCost,\n      });\n      console.log(purchases);\n    } else if (transaction.type.toLowerCase() === \"sell\") {\n      let currentSaleEntry = {};\n      let qtySaleRemaining = transaction.qty;\n      let costBasis = 0;\n      currentSaleEntry.id = transaction.id;\n      currentSaleEntry.service = purchases[0].service;\n      currentSaleEntry.purchaseDate = purchases[0].transDate;\n      currentSaleEntry.asset = transaction.asset;\n      currentSaleEntry.sellDate = transaction.transDate;\n      currentSaleEntry.displayDate = transaction.displayDate;\n      do {\n        if (purchases.length === 0) {\n          const errorMessage = `Transaction dated ${currentSaleEntry.displayDate} is selling more assets than are currently owned.`;\n          throw new SellMoreThanOwnError(\n            errorMessage,\n            currentSaleEntry.displayDate\n          );\n        }\n\n        if (purchases[0].qtyLeft >= qtySaleRemaining) {\n          // add assets from this purchase to cost basis\n          costBasis += purchases[0].avgCost * qtySaleRemaining;\n\n          // update quantity remaining for purchase\n          if (purchases[0].qtyLeft === qtySaleRemaining) {\n            purchases.shift();\n          } else {\n            purchases[0].qtyLeft -= qtySaleRemaining;\n          }\n          qtySaleRemaining = 0;\n        } else {\n          // add assets from this purchase to cost basis\n          costBasis += purchases[0].avgCost * purchases[0].qtyLeft;\n\n          // subtract quantity used from quantity remaining\n          qtySaleRemaining -= purchases[0].qtyLeft;\n\n          // remove depleted purchase from purchases array\n          purchases.shift();\n        }\n      } while (qtySaleRemaining > 0);\n\n      costBasis += transaction.fee;\n\n      currentSaleEntry.capitalGain = transaction.amount - costBasis;\n      currentSaleEntry.costBasis = costBasis;\n\n      calculationExport.push(currentSaleEntry);\n\n      // add cost basis to the trasaction object\n      transaction.costBasis = costBasis;\n      transaction.capitalGain = transaction.amount - costBasis;\n    }\n  }\n  return calculationExport;\n}\n","import React, { useReducer } from \"react\";\n// import moment from 'moment';\n// import uuid from 'uuid';\nimport CalculationContext from \"./calculationContext\";\nimport calculationReducer from \"./calculationReducer\";\nimport { calculateCostBasis } from \"./calculateCostBasis\";\n\nimport { ADD_ASSET_TRANSACTIONS } from \"../types\";\n\nconst CalculationState = (props) => {\n  const initialState = {\n    assetTypes: null,\n    transByAsset: null,\n    exportByAsset: null,\n  };\n\n  const [state, dispatch] = useReducer(calculationReducer, initialState);\n\n  const setAssetTypes = (transactions) => {\n    let uniqueTypes = [];\n    let transByAsset = {};\n    let assetTrans = null;\n    let exportByAsset = {};\n    let calcTransactions = [...transactions];\n\n    // sort all transactions by date\n    calcTransactions.sort((a, b) => a.transDate - b.transDate);\n\n    // generate list of unique asset types\n    for (let transaction of calcTransactions) {\n      if (uniqueTypes.indexOf(transaction.asset) === -1) {\n        uniqueTypes.push(transaction.asset.toUpperCase());\n      }\n    }\n\n    // separate calcTransactions by asset type and calculate cost basis\n    for (let type of uniqueTypes) {\n      assetTrans = calcTransactions.filter(\n        (transaction) => transaction.asset.toUpperCase() === type\n      );\n\n      exportByAsset[type] = calculateCostBasis(assetTrans);\n      transByAsset[type] = assetTrans;\n    }\n\n    // calculate cost basis\n\n    let myPayload = {\n      types: uniqueTypes,\n      assets: transByAsset,\n      export: exportByAsset,\n    };\n\n    dispatch({\n      type: ADD_ASSET_TRANSACTIONS,\n      payload: myPayload,\n    });\n  };\n\n  return (\n    <CalculationContext.Provider\n      value={{\n        assetTypes: state.assetTypes,\n        transByAsset: state.transByAsset,\n        exportByAsset: state.exportByAsset,\n        setAssetTypes,\n      }}\n    >\n      {props.children}\n    </CalculationContext.Provider>\n  );\n};\n\nexport default CalculationState;\n","import React, { Fragment, Component } from \"react\";\nimport TransactionForm from \"./components/transaction/TransactionForm\";\nimport TransactionTable from \"./components/transaction/TransactionTable\";\nimport CalculationTable from \"./components/calculation/CalculationTable\";\nimport ErrorMessage from \"./components/errors/ErrorMessage\";\n\nimport TransactionState from \"./context/transaction/TransactionState\";\nimport CalculationState from \"./context/calculation/CalculationState\";\n\n// import './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: null,\n    };\n  }\n\n  setErrorMessage = (message) => this.setState({ errorMessage: message });\n\n  render() {\n    return (\n      <TransactionState>\n        <CalculationState>\n          <Fragment>\n            <h1 className=\"center-align\">Crypto Capital Gains Calculator</h1>\n            <div className=\"container\">\n              <p className=\"flow-text center\">\n                This app was built mainly to get practice designing and building\n                React apps. I am not an accountant and make no guarantees that\n                the calculations performed within this app are accurate. I\n                encourage you to seek the help of an accountant or tax expert\n                with any questions regarding tax obligations for crypto\n                transactions.\n              </p>\n            </div>\n            <div className=\"divider\"></div>\n            <TransactionForm />\n            <TransactionTable setErrorMessage={this.setErrorMessage} />\n            <ErrorMessage errorMessage={this.state.errorMessage} />\n            <CalculationTable />\n          </Fragment>\n        </CalculationState>\n      </TransactionState>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}